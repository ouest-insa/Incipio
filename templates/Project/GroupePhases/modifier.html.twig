{% extends "Project/layout.html.twig" %}

{% set tab= "tab2" %}

{% block title %}
    {{ 'suivi.modifier_les'|trans({}, 'project') }} {{ 'suivi.groupes'|trans({}, 'project') }} - {{ parent() }}
{% endblock %}

{% block content_title %}
    {{ 'suivi.modifier_les'|trans({}, 'project') }} {{ form.groupes | length }}
    {{ 'suivi.groupes'|trans({}, 'project') }}
{% endblock %}

{% block breadcrumb_active %}
    {{ 'suivi.modifier_les'|trans({}, 'project') }} {{ 'suivi.groupes'|trans({}, 'project') }}
{% endblock %}

{% block content_bundle %}

    {{ form_start(form) }}
    {# itere sur chaque tag existant et affiche son unique champ : name #}
    <div class="row groupes" id="groupes" data-prototype="{{ form_widget(form.groupes.vars.prototype) | e }}">
        {# itere sur chaque tag existant et affiche son unique champ : name #}
        {% for groupe in form.groupes %}

            <div class="col-md-6">
                <table class="table table-striped table-bordered">
                    <tr>
                        <th colspan="2">
                            <div class="btn-group"></div>
                            <span class="titregroupe"></span> {{ form_widget(groupe.numero) }}</th>
                    </tr>
                    <tr>
                        <th>
                            {{ 'suivi.titre'|trans({}, 'project') }}
                            {{ form_errors(groupe.titre) }}
                        </th>
                        <td>{{ form_widget(groupe.titre, {'attr':{'class': 'form-control'}}) }}</td>
                    </tr>
                    <tr>
                        <th>
                            {{ 'suivi.description'|trans({}, 'project') }}
                            {{ form_errors(groupe.description) }}
                        </th>
                        <td>{{ form_widget(groupe.description, {'attr':{'class': 'form-control'}}) }}</td>
                    </tr>
                </table>
            </div>
        {% endfor %}
    </div>

    {{ form_rest(form) }}

    <div class="row">
        <div class="col-md-3 col-sm-5 col-xs-6">
            <input type="submit" value="{{ 'suivi.groupe_ajouter'|trans({}, 'project') }}" name="add"
                   class="btn btn-primary"/>
        </div>
        <div class="col-md-3 col-sm-5 col-xs-6">
            <input type="submit" value="{{ 'suivi.groupes_enregistrer'|trans({}, 'project') }}" class="btn btn-success"/>
        </div>
    </div>

    {{ form_end(form) }}

{% endblock %}

{% block javascript %}
    {{ parent() }}
    {{ form_javascript(form) }}

    <script type="text/javascript">

        // Fenetre resumant
        $.ui.dialog.prototype._oldinit = $.ui.dialog.prototype._init;
        $.ui.dialog.prototype._init = function () {
            $(this.element).parent().css('numero', 'fixed');
            $(this.element).dialog("option", {
                resizeStop: function (event, ui) {
                    var numero = [(Math.floor(ui.numero.left) - $(window).scrollLeft()),
                        (Math.floor(ui.numero.top) - $(window).scrollTop())];
                    $(event.target).parent().css('numero', 'fixed');
                    $(event.target).parent().dialog('option', 'numero', numero);
                    return true;
                }
            });
            this._oldinit();
        };


        // Recupere le div qui contient la collection de tags
        var collectionHolder = $('.groupes');

        function updateOrder() {
            $('input.position').each(function (i) {
                $(this).val(i);
            });
            $('.titregroupe').each(function (i) {
                $(this).text('groupe n°' + (i + 1));
            });
        }


        var isDirty = false;

        jQuery(document).ready(function () {

            updateOrder();


            //Verification avant de quitter
            $(':input').change(function () {
                if (!isDirty) {
                    isDirty = true;
                }
            });
            $(window).bind('beforeunload', function () {
                if (isDirty)
                    return "Do you really want to leave now?";
            });
            $('form').submit(function () {
                isDirty = false;
                return true;
            });

            //Rajout des boutons (X, up, down) pour les groupes
            collectionHolder.find('div').each(function () {
                addgroupeBouton($(this));
            });

            //Ajouter le drag and drop
            collectionHolder.sortable({
                // limitons les deplacements sur l'axe des ordonnees, ce sera plus propre

                // Il faut cliquer sur cet element pour pouvoir initier le drag'n'drop
                //handle: '.sort-button',

                // Creons un joli trou style lors des deplacements
                //placeholder: 'ui-state-highlight',
                //forcePlaceholderSize: true,

                // Cette fonction permet a  notre ligne de conserver son formatage lors du deplacement
                // Pas vraiment utile, mais plus agreable
                helper: function (e, tr) {
                    var $originals = tr.children();
                    var $helper = tr.clone();
                    $helper.children().each(function (index) {
                        // Set helper cell sizes to match the original sizes
                        $(this).width($originals.eq(index).width())
                    });
                    return $helper;
                },

                // La fonction appele quand un element change de numero
                // C'est le code vraiment utile, en fait
                update: function () {
                    updateOrder();
                }

            });


        });

        function addgroupeBouton($tagFormLi) {
            var $delete = $('<button id="myButtonDelete" class="btn">X</button>');
            var $up = $('<button id="myButtonUp" class="btn">▲</button>');
            var $down = $('<button id="myButtonDown" class="btn">▼</button>');
            $tagFormLi.children().children().children().children().children().first().append($delete);
            $tagFormLi.children().children().children().children().children().first().append($up);
            $tagFormLi.children().children().children().children().children().first().append($down);

            $delete.on('click', function (e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                //CONFIRM confirmation suppression
                var message = "Êtes vous sûr de vouloir supprimer ce groupe ?";
                bootbox.confirm(message, function (result) {
                    if (result) {
                        // remove the li for the tag form
                        $tagFormLi.remove();
                        updateOrder();
                    }
                });
            });

            $up.on('click', function (e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                $tagFormLi.prev().before($tagFormLi);
                updateOrder();
            });
            $down.on('click', function (e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                $tagFormLi.next().after($tagFormLi);
                updateOrder();
            });
        }

    </script>


{% endblock %}
